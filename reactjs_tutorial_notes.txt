JS Notes:
Classes: Define a class:  class User {  //constructs the class  constructor (name) {   this.name = name;  }    //get value from class  get name () {   return this._name  }    //set value of class  set name(value) {   if (value.length < 4) {    alert("name is too short");    return;   }   this._name = value;  }  //call method from class  method () {   do_stuff (this.name);  }    //static method: called outside class instance only  static method () {   do stuff;   return data;  }   }  Create instance of a class: let user = new User ("Bob");  call method of class: user.method();  No property:value assignments are allowed inside class 
Extend a class:
 //parent class class Animal {  constructor () {   this.name = name;  }    speak() {   console.log(this.name + ' makes a noise');  } }  //child of parent class class Dog extends Animal {  speak() {   console.log(this.name + ' barks.');  } }  //example usage var d = new Dog('Peony') d.speak();  Super keyword is used to call functions on an object's parent super.method_name() Object prototypes: all objects in Javascript are instances of Object;  A typical object inherits properties (including methods) from Object.prototype  React Notes:// React has different kinds of components//React.Component Components tell react what you want to render// React will render the right components when your data changes
//This is react component classclass ShoppingList extends React.Component { //render method returns a description of what you want to render //React takes that description and renders it to the screen //React returns a React Element (a lightweight description of what to render) //Most developers use JSX which makes it easier to write these structures render() {  return (   //div tag is converted by React into React.createElement('div')   //createElement is used for each html element   <div className="shopping-list">    //Any JS Expression can be placed in JSX using {}'s    <h1>Shopping List for {this.props.name}</h1>    <ul>     <li>Instragram</li>     <li>Whatsapp</li>     <li>Oculus</li>    </ul>  ); }}
//Each react element is a JS Object that can be stored in a variable or passed around the program
// When you want to aggregate data from multiple children or to have two child components communicate // with each other, move the state upwards so that it lives in the parent component. // The parent can then pass the state back down to the children via props, so that the child components // are always in sync with each other and with the parent.// Pulling state upward is common when re-factoring React components
//when this.setState() is called, an update to the component is scheduled, causing React to merge in the passed//state update and re-render the component along with its descendants. 
//Avoid mutating data variables (immutability of data). Keeping data immutable it is easier to determine when components need//to be rerendered
// Functional Components can be used in place for components that are controlled by parent//uses props instead of this.props// Code:function Square(props) { return (  <button className="square" onClick={props.onClick}>   {props.value}  </button> );}
Rendering a list of items: When a list of items is rendered, React always stores some info about each item in the list. IF you render a component that has state, state needs to be stored. React requires you to specify a key property on each element in a list, a string to differentiate each component from its siblings.  <li key={user.id}>{user.name}: {user.taskCount} tasks left</li> key is a special property reserved by React. When an element is created, React pulls off the key property and stores the key directly on the returned element.   -it cannot be referenced with as part of props. When a list is re-rendered, React takes each element in the new version and looks for one with a matching key in the  previous list. When a key is added to the set, a component is created; Whe a key is removed, a componenet is destroyed; Keys tell react about the identity of each component You should assign proper keys whenever you build dynamic lists.   
